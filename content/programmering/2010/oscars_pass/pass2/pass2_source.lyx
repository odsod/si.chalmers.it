#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass exam
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section*

\lang swedish
SI-pass 2 OOP
\end_layout

\begin_layout Description

\lang swedish
Handledare: Oscar Söderlund
\end_layout

\begin_layout Description

\lang swedish
Mail: soscar@student.chalmers.se
\end_layout

\begin_layout Standard

\lang swedish
\begin_inset VSpace 1em
\end_inset


\end_layout

\begin_layout Standard

\lang swedish
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{questions}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
question
\end_layout

\begin_layout Plain Layout

Implementera en generell metod vars syfte är att läsa in ett heltal från
 kommandoraden.
 Metoden skall ha parametrar som låter den anropande programmeraren specificera
 inom vilket intervall det inmatade talet får befinna sig, samt vilket eventuell
t meddelande användaren ska få innan programmet stannar och väntar på input.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Om talet användaren matar in inte ligger i det specificerade intervallet,
 skall         metoden fortsätta fråga användaren tills korrekt input erhållits.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Följande exempelkörningar visar hur er metod skall kunna andropas med olika
             parameteruppsättningar:
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Exempelkörning1:
\end_layout

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

> Ange ett heltal mellan 1 och 100: 200
\end_layout

\begin_layout Plain Layout

> Ange ett heltal mellan 1 och 100: 42
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\begin_layout Plain Layout

Exempelkörning 2:
\end_layout

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

> Ange ett negativt tal: 5
\end_layout

\begin_layout Plain Layout

> Ange ett negativt tal: -1
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\begin_layout Plain Layout

Tips: Bestäm tidigt hur ni vill att metodhuvudet, dvs parametrar och returvärde,
 skall se ut.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Diskutera: Vilka argument bör skickas till metoden om man skall kunna mata
 in vilket tal som helst? Vad sätter gränsen för hur stora tal som kan matas
 in?
\end_layout

\begin_layout Plain Layout


\backslash
vspace{1em}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
question
\end_layout

\begin_layout Plain Layout

Skriv ett program som läser in fem stycken heltal från kommandoraden och
 sedan         avgör och skriver ut det största talet.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Exempelkörning:
\end_layout

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

> Ange ett tal: 10
\end_layout

\begin_layout Plain Layout

> Ange ett tal: 20
\end_layout

\begin_layout Plain Layout

> Ange ett tal: 100
\end_layout

\begin_layout Plain Layout

> Ange ett tal: 30
\end_layout

\begin_layout Plain Layout

> Ange ett tal: 40
\end_layout

\begin_layout Plain Layout

> Det största talet: 100
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{1em}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
question
\end_layout

\begin_layout Plain Layout

Skriv en metod som låter användaren gissa sig fram till ett okänt slumptal.
 Talet skall genereras slumpmässigt, och således vara olika varje gång man
 anropar metoden.
 Vilket intervall slumptalet får befinna sig i skall specificeras av parametrar
 till metoden.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Metoden skall be om gissningar tills att det sökta talet är inmatat och
 därefter avslutas.
 Metoden skall hjälpa användaren gissa genom att tala om ifall det senast
 inmatade talet är större eller mindre än det sökta talet.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
begin{flushright}
\end_layout

\begin_layout Plain Layout

(vänd)
\end_layout

\begin_layout Plain Layout


\backslash
end{flushright}
\end_layout

\begin_layout Plain Layout


\backslash
newpage{}
\end_layout

\begin_layout Plain Layout

Skriv sedan en mainmetod som låter användaren gissa tal mellan 1 och 1000.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Exempelkörning:
\end_layout

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

> Gissa ett tal: 952     
\end_layout

\begin_layout Plain Layout

> Lägre!     
\end_layout

\begin_layout Plain Layout

> Gissa ett tal: 12     
\end_layout

\begin_layout Plain Layout

> Högre!     
\end_layout

\begin_layout Plain Layout

> Gissa ett tal: 42     
\end_layout

\begin_layout Plain Layout

> Rätt!
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{1em}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
question
\end_layout

\begin_layout Plain Layout

Fibonaccitalen är en oändlig sekvens av heltal som inleds med 0 följt av
 1, där varje nytt tal i sekvensen erhålls genom att ta summan av de två
 föregående talen.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Ex: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Matematiskt kan fibonaccifunktionen defineras:
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

f(0) = 0
\end_layout

\begin_layout Plain Layout

f(1) = 1
\end_layout

\begin_layout Plain Layout

f(n) = f(n-1) + f(n-2), n > 1
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\begin_layout Plain Layout

Skriv en motsvarande funktion i Java, fibonacci, som givet en positiv heltalspar
ameter n returnerar det n:te talet i fibonaccisekvensen.
 Anropet fibonacci(6) bör t.ex returnera talet 8.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Skriv sedan en mainmetod som läser in ett heltal >= 0 från kommandoraden
 och         skriver talet på motsvarande position i fibonaccisekvensen.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Exempelkörning:
\end_layout

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

> Mata in ett heltal >= 0: 6
\end_layout

\begin_layout Plain Layout

> Fibonaccital nr 6: 8
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{1em}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
question
\end_layout

\begin_layout Plain Layout

När vi skriver tal använder vi oftast basen 10.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Detta medför att talet 47915 kan skrivas om som: $4*10^4 + 7*10^3 + 9*10^2
 + 1*10^1 + 5*10^0$
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Skriv ett program som läser in ett positivt heltal från kommandoraden och
 skriver ut det på den ovan givna formen.
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\begin_layout Plain Layout

Exempeloutput:
\end_layout

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\begin_layout Plain Layout

> Mata in ett tal: 385
\end_layout

\begin_layout Plain Layout

> 385 = 3*10^2 + 8*10^1 + 5*10^0
\end_layout

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\begin_layout Plain Layout


\backslash
vspace{1em}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{questions}
\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*

\lang swedish
Tentauppgifter
\end_layout

\begin_layout Standard

\lang swedish
\begin_inset VSpace 1em
\end_inset


\end_layout

\begin_layout Quote
En ekvation av formen Ax + By + Cz = D, där A, B, C och D kallas en diofantisk
 ekvation.
 (Diofantos var en grekisk matematiker som levde omkring 250 f.
 Kr.) Ekvationen kan ha noll eller flera lösningar.
 Vi är i denna uppgift bara intresserade av ekvationer i vilka A, B, C och
 D är heltal som är större än noll och vi söker bara sådana lösningar där
 x, y och z alla är större än eller lika med noll.
 Därmed vet vi t.ex.
 att x <= D/A.
 Skriv ett program som läser in de fyra talen A, B, C och D och sedan skriver
 ut alla lösningar enligt ovan och slutligen även en uppgift om antalet
 lösningar.
 Så här kan två körningar av programmet se ut:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Quote
Ange talen A, B, C och D: 2 4 6 7 
\begin_inset Newline newline
\end_inset

0 lösningar!
\end_layout

\begin_layout Quote
Ange talen A, B, C och D: 2 4 6 8 
\begin_inset Newline newline
\end_inset

0 2 0 
\begin_inset Newline newline
\end_inset

1 0 1 
\begin_inset Newline newline
\end_inset

2 1 0 
\begin_inset Newline newline
\end_inset

4 0 0 
\begin_inset Newline newline
\end_inset

4 lösningar!
\end_layout

\begin_layout Standard
\align right
(10 p)
\end_layout

\begin_layout Quote
När man skall spela in ett TV-program på video är det ibland lite knöligt
 att räkna ut om bandet räcker.
 Detta skulle bli enklare om man hade ett program som räknade ut hur många
 minuter det är mellan två klockslag.
 Skriv ett sådant program.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Programmet skall från två dialogrutor läsa in starttiden respektive sluttiden
 för programmet som skall spelas in.
 Tiderna skall anges med formen tt.mm i dialogrutorna.
 Som resultat skall programmet visa hur många minuter det är mellan de två
 tidpunkterna.
 Programmet skall även klara av det fall när man börjar en inspelning före
 midnatt och avslutar den efter.
 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Tips: Räkna om de båda tiderna till antalet minuter som gått sedan det aktuella
 dygnets start.
\end_layout

\begin_layout Standard
\align right
(10 p)
\end_layout

\begin_layout Quote
Ett positivt heltal N kallas lyckligt (happy) om följande förfarande leder
 till talet 1:
\end_layout

\begin_layout Quote
Upprepa: N = numman av kvadraterna på siffrorna i N
\end_layout

\begin_layout Quote
T.ex är 44 ett lyckligt tal, eftersom: 440 -> 16+16+0=32 -> 9+4=13 -> 1+9=10
 -> 1
\end_layout

\begin_layout Quote
Uppenbarligen är 1 ett lyckligt tal.
 Positiva heltal som inte leder till 1 kallas olyckliga.
 De leder istället till 4 som vid fortsatt iteration ger en cykel 4 -> 16
 -> 37 -> 58 -> 89 -> 145 -> 42 -> 20 -> 4.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Quote
a) Skriv en metod int sumOfSqr(int n) som ger efterföljaren till n enligt
 processen ovan.
 Dvs resultatet skall vara summan av kvadraterna på siffrorna i n.
 Det får här och i fortsättningen förutsättas att resultatet är mindre än
 det största tillåtna heltalet.
 (Integer.MAX_VALUE)
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Quote
b) Skriv en metod boolean isHappy(int n) som avgör om n är lyckligt eller
 ej.
 Det får förutsättas att antingen 1 eller 4 nås.
 Utnyttja metoden ovan.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Quote
c) Skriv ett fullständigt program som bestämmer och skriver ut antalet lyckliga
 tal mindre än 1000.
 Utnyttja metoderna ovan, som naturligtvis inte behöver upprepas.
\end_layout

\begin_layout Standard
\align right
(10 p)
\end_layout

\end_body
\end_document
